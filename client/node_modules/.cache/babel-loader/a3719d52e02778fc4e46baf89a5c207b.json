{"ast":null,"code":"import { testAPI } from \"../api/api\";\nimport { returnErrors, returnSuccess } from './SuccessErrorReducer';\nconst GET_INFORM_OF_USER = \"GET_INFORM_OF_USER\";\nlet initialState = {\n  inform: null,\n  isAddInform: false,\n  sendHelpMessage: false\n};\n\nlet InformReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_INFORM_OF_USER:\n      debugger;\n      return { ...state,\n        inform: action.inform,\n        isAddInform: action.isAddInform\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst addInform = (inform, isAddInform) => ({\n  type: GET_INFORM_OF_USER,\n  inform,\n  isAddInform\n});\n\nexport const getInform = id => dispatch => {\n  debugger;\n  testAPI.getInform(id).then(response => {\n    debugger;\n    dispatch(addInform(response.data.inform, response.data.inform.isAddInform));\n  });\n};\nexport const updateInform = inform => (dispatch, getState) => {\n  debugger;\n  testAPI.updateInform(getState().auth.user.id, inform).then(response => {\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_USER_INFORM_CHANGE'));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, 'USER_INFORM_CHANGE_ERROR'));\n  });\n};\nexport const setInform = (inform, isAddInform = true) => (dispatch, getState) => {\n  debugger;\n  testAPI.setInform(getState().auth.user.id, inform, isAddInform).then(response => {\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_USER_INFORM_SET'));\n    dispatch(addInform(response.data));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, 'ERROR_USER_INFORM_SET'));\n  });\n};\nexport const sendHelpMessage = helpMessage => (dispatch, getState) => {\n  testAPI.sendHelpMessage(helpMessage, getState().auth.userId).then(response => {\n    dispatch(returnSuccess(response.data.message, response.status, 'SUCCESS_HELP_MESSAGE'));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, 'ERROR_HELP_MESSAGE'));\n  });\n};\nexport default InformReducer;","map":{"version":3,"sources":["/Volumes/Anton/myApp-1/APP/client/src/redux/InformReducer.js"],"names":["testAPI","returnErrors","returnSuccess","GET_INFORM_OF_USER","initialState","inform","isAddInform","sendHelpMessage","InformReducer","state","action","type","addInform","getInform","id","dispatch","then","response","data","updateInform","getState","auth","user","message","status","catch","err","setInform","helpMessage","userId"],"mappings":"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","sourcesContent":["import { testAPI } from \"../api/api\";\nimport {returnErrors,returnSuccess} from './SuccessErrorReducer'\nconst GET_INFORM_OF_USER = \"GET_INFORM_OF_USER\";\n\n\n\nlet initialState = {\n  inform: null,\n  isAddInform:false,\n  sendHelpMessage:false\n};\n\nlet InformReducer = (state = initialState, action) => {\n  switch (action.type) {\n   \n    case GET_INFORM_OF_USER:\n      debugger\n      return { ...state, inform: action.inform,isAddInform:action.isAddInform};\n    default:\n      return state;\n  }\n};\n\nconst addInform=(inform,isAddInform)=>({type:GET_INFORM_OF_USER,inform,isAddInform})\n\nexport const getInform=(id)=>(dispatch)=>{\n  debugger\n   testAPI.getInform(id).then(response=>{\n     debugger\n       dispatch(addInform(response.data.inform,response.data.inform.isAddInform))\n   })\n}\nexport const updateInform=(inform)=>(dispatch,getState)=>{\n  debugger\n   testAPI.updateInform((getState().auth.user.id),inform).then(response=>{\n       dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_USER_INFORM_CHANGE'))\n   }).catch(err=>{\n    dispatch(returnErrors(err.response.data.message,err.response.status,'USER_INFORM_CHANGE_ERROR'))\n  })\n}\nexport const setInform=(inform,isAddInform=true)=>(dispatch,getState)=>{\n  debugger\n  testAPI.setInform((getState().auth.user.id),inform,isAddInform).then(response=>{\n    dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_USER_INFORM_SET'))\n    dispatch(addInform(response.data))\n  }).catch(err=>{\n    dispatch(returnErrors(err.response.data.message,err.response.status,'ERROR_USER_INFORM_SET'))\n  })\n}\n\nexport const sendHelpMessage=(helpMessage)=>(dispatch,getState)=>{\n  testAPI.sendHelpMessage(helpMessage,getState().auth.userId).then(response=>{\n    dispatch(returnSuccess(response.data.message,response.status,'SUCCESS_HELP_MESSAGE'))\n  }).catch(err=>{\n    dispatch(returnErrors(err.response.data.message,err.response.status,'ERROR_HELP_MESSAGE'))\n  })\n}\n\nexport default InformReducer"]},"metadata":{},"sourceType":"module"}