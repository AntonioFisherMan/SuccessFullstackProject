{"ast":null,"code":"import * as axios from \"axios\";\nconst baseUrl = \"http://localhost:5000\";\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    \"x-auth-token\": sessionStorage.getItem(\"token\")\n  }\n});\nexport const testAPI = {\n  changeFilter(data, pageSize = 10, pageNumber = 1) {\n    return axios.post(baseUrl + `goods?page=${pageNumber}&pageSize=${pageSize}`, {\n      data\n    });\n  },\n\n  subscribeNewUser(email) {\n    return axios.post(baseUrl + 'auth/subscribe', {\n      email\n    });\n  },\n\n  getMyUsers() {\n    return axios.get(baseUrl + \"users\").then(response => response.data);\n  },\n\n  getGood(id) {\n    return instance.get(baseUrl + `goods?id=${id}`);\n  },\n\n  login(email, password, rememberMe = false) {\n    return axios.post(baseUrl + \"auth/\", {\n      email,\n      password,\n      rememberMe\n    });\n  },\n\n  register(name, email, password) {\n    return axios.post(baseUrl + \"users\", {\n      name,\n      email,\n      password\n    });\n  },\n\n  forgotPassword(forgotEmail) {\n    return axios.post(baseUrl + \"users/forgot_password\", {\n      forgotEmail\n    });\n  },\n\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(baseUrl + \"users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token\n    });\n  },\n\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(baseUrl + \"users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email\n    });\n  },\n\n  getAuth() {\n    return instance.get(baseUrl + \"auth/user\");\n  },\n\n  getReviews() {\n    return instance.get(baseUrl + \"goods/reviews\").then(response => response.data);\n  },\n\n  setOrders(items, inform, id) {\n    return instance.post(baseUrl + `orders`, {\n      items,\n      inform,\n      userId: id\n    });\n  },\n\n  setUnloginOrders(data) {\n    return instance.post(baseUrl + `orders/unlogin`, {\n      data\n    });\n  },\n\n  getOrders(id) {\n    return instance.get(baseUrl + `orders/${id}`);\n  },\n\n  getInform(id) {\n    return instance.get(baseUrl + `inform/${id}`);\n  },\n\n  updateInform(id, inform) {\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.put(baseUrl + `inform/${id}`, inform, config);\n  },\n\n  setInform(id, inform) {\n    inform.append(\"isAddInform\", true);\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.post(baseUrl + `inform/${id}`, inform, config);\n  },\n\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(baseUrl + `users/help`, {\n      helpMessage,\n      userId: id\n    });\n  },\n\n  setReviews(name, photo, files, goodsId, rating = 100) {\n    files.append(\"name\", name);\n    files.append(\"photo\", photo);\n    files.append(\"rating\", rating);\n    const config = {\n      header: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    return instance.post(baseUrl + `goods/reviews/${goodsId}`, files, config);\n  }\n\n};","map":{"version":3,"sources":["/Volumes/Anton/myApp-1/APP/client/src/api/api.js"],"names":["axios","baseUrl","instance","create","headers","sessionStorage","getItem","testAPI","changeFilter","data","pageSize","pageNumber","post","subscribeNewUser","email","getMyUsers","get","then","response","getGood","id","login","password","rememberMe","register","name","forgotPassword","forgotEmail","resetPassword","newPassword","verifyPassword","token","changeUserPass","oldPass","getAuth","getReviews","setOrders","items","inform","userId","setUnloginOrders","getOrders","getInform","updateInform","config","header","put","setInform","append","sendHelpMessage","helpMessage","setReviews","photo","files","goodsId","rating"],"mappings":"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","sourcesContent":["import * as axios from \"axios\";\n\nconst baseUrl = \"http://localhost:5000\";\n\nlet instance = axios.create({\n  baseUrl: baseUrl,\n  headers: {\n    \"x-auth-token\": sessionStorage.getItem(\"token\"),\n  },\n});\n\nexport const testAPI = {\n  changeFilter(data,pageSize=10,pageNumber=1){\n    return axios.post(\n      baseUrl+`goods?page=${pageNumber}&pageSize=${pageSize}`,{data}\n    )\n},\nsubscribeNewUser(email){\nreturn axios.post( baseUrl+'auth/subscribe',{email})\n},\n  getMyUsers() {\n    return axios\n      .get(baseUrl+\"users\")\n      .then((response) => response.data);\n  },\n  getGood(id) {\n    return instance.get(baseUrl + `goods?id=${id}`);\n  },\n  login(email, password, rememberMe = false) {\n    return axios.post(baseUrl+\"auth/\", {\n      email,\n      password,\n      rememberMe,\n    });\n  },\n  register(name, email, password) {\n    return axios.post(baseUrl+\"users\", { name, email, password });\n  },\n  forgotPassword(forgotEmail) {\n    return axios.post(baseUrl+\"users/forgot_password\", {\n      forgotEmail,\n    });\n  },\n  resetPassword(newPassword, verifyPassword, token) {\n    return instance.post(baseUrl+\"users/reset_password\", {\n      newPassword,\n      verifyPassword,\n      token,\n    });\n  },\n  changeUserPass(oldPass, newPassword, verifyPassword, email) {\n    return instance.post(baseUrl+\"users/change_password\", {\n      oldPass,\n      newPassword,\n      verifyPassword,\n      email,\n    });\n  },\n  getAuth() {\n    return instance.get(baseUrl+\"auth/user\");\n  },\n  getReviews() {\n    return instance\n      .get(baseUrl+\"goods/reviews\")\n      .then((response) => response.data);\n  },\n  setOrders(items, inform, id) {\n    return instance.post(baseUrl+`orders`, {\n      items,\n      inform,\n      userId: id,\n    });\n  },\n  setUnloginOrders(data){\n    return instance.post(baseUrl+`orders/unlogin`, {\n      data\n    });\n  },\n  getOrders(id) {\n    return instance.get(baseUrl+`orders/${id}`);\n  },\n  getInform(id) {\n    return instance.get(baseUrl+`inform/${id}`);\n  },\n  updateInform(id, inform) {\n    const config = {\n      header: {'Content-Type': 'multipart/form-data'}\n    };\n    return instance.put(baseUrl+`inform/${id}`,inform,config );\n  },\n  setInform(id,inform) {\n    inform.append(\"isAddInform\",true)\n    const config = {\n      header: {'Content-Type':'multipart/form-data'}\n    };\n    return instance.post(baseUrl+`inform/${id}`,inform,config );\n  },\n  sendHelpMessage(helpMessage, id) {\n    return instance.post(baseUrl+`users/help`, {\n      helpMessage,\n      userId: id,\n    });\n  },\n  setReviews(name,photo,files,goodsId,rating=100) {\n   files.append(\"name\",name)\n   files.append(\"photo\",photo)\n   files.append(\"rating\",rating)\n    const config = {\n      header: {'Content-Type': 'multipart/form-data'}\n    };\n    return instance.post(\n      baseUrl+`goods/reviews/${goodsId}`,\n      files,\n      config\n    );\n  },\n};\n"]},"metadata":{},"sourceType":"module"}