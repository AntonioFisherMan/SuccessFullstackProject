{"ast":null,"code":"import { returnErrors, returnSuccess, clearSuccess } from \"./SuccessErrorReducer\";\nimport { testAPI } from \"../api/api\";\nconst USER_LOADING = \"USER_LOADING\";\nconst USER_LOADED = \"USER_LOADED\";\nconst AUTH_ERROR = \"AUTH_ERROR\";\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nconst LOGIN_FAIL = \"LOGIN_FAIL\";\nconst LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nconst REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nconst REGISTER_FAIL = \"REGISTER_FAIL\";\nconst FORGOT_PASS = \"FORGOT_PASS\";\nconst FORGOT_PASS_RESET = \"FORGOT_PASS_RESET\";\nconst EMAIL_SENT = \"EMAIL_SENT\";\nconst RESET_PASS = \"RESET_PASS\";\nconst RESET_ERROR = \"RESET_ERROR\";\nconst FORGOT_ERROR = \"FORGOT_ERROR\";\nconst initialState = {\n  token: sessionStorage.getItem(\"token\") || \"\",\n  isAuth: null,\n  isLoading: false,\n  user: null,\n  userInform: null,\n  forgotEmail: null,\n  emailSent: false\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case USER_LOADED:\n      sessionStorage.setItem(\"token\", action.payload.token);\n      return { ...state,\n        isAuth: true,\n        user: action.payload.user,\n        userInform: action.userInform\n      };\n\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      sessionStorage.setItem(\"token\", action.payload.token);\n      return { ...state,\n        isAuth: true,\n        isLoading: false\n      };\n\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case REGISTER_FAIL:\n    case LOGOUT_SUCCESS:\n      sessionStorage.removeItem(\"token\");\n      return { ...state,\n        isAuth: false,\n        isLoading: false,\n        user: null,\n        userInform: null,\n        token: null\n      };\n\n    case FORGOT_PASS:\n      return { ...state,\n        forgotEmail: action.forgotEmail\n      };\n\n    case EMAIL_SENT:\n      return { ...state,\n        emailSent: action.bool\n      };\n\n    case FORGOT_PASS_RESET:\n      return { ...state,\n        forgotEmail: action.forgotEmail,\n        emailSent: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const userLoad = (payload, userInform) => ({\n  type: USER_LOADED,\n  payload,\n  userInform\n});\nexport const changePass = forgotEmail => ({\n  type: FORGOT_PASS,\n  forgotEmail\n});\nexport const emailSent = bool => ({\n  type: EMAIL_SENT,\n  bool\n});\nexport const resetEmailSentClear = forgotEmail => ({\n  type: FORGOT_PASS_RESET,\n  forgotEmail\n});\nexport const requestToken = () => (dispatch, getState) => {\n  testAPI.forgotPassword(getState().auth.forgotEmail).then(response => {\n    dispatch(emailSent(true));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, \"FORGOT_ERROR\"));\n    dispatch({\n      type: FORGOT_ERROR\n    });\n  });\n};\nexport const resetPass = (newPassword, verifyPassword, token) => dispatch => {\n  testAPI.resetPassword(newPassword, verifyPassword, token).then(response => {\n    dispatch({\n      type: RESET_PASS\n    });\n    dispatch(returnSuccess(response.data.message, response.status, \"SUCCESS_RESET\"));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, \"RESET_ERROR\"));\n    dispatch({\n      type: RESET_ERROR\n    });\n  });\n};\nexport const changeUserPass = (oldPass, newPassword, verifyPassword) => (dispatch, getState) => {\n  testAPI.changeUserPass(oldPass, newPassword, verifyPassword, getState().auth.user.email).then(response => {\n    dispatch(returnSuccess(response.data.message, response.status, \"SUCCESS_CHANGE_PASS\"));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, \"ERROR_CHANGE_PASS\"));\n  });\n};\nexport const getAuth = () => async (dispatch, getState) => {// try {\n  //   const token=getState().auth.token;\n  //    let response=await testAPI.getAuth(token)\n  //     dispatch(userLoad(response.data))\n  // } catch (error) {\n  //   dispatch({type:AUTH_ERROR})\n  // }\n};\nexport const login = (email, password, rememberMe) => async dispatch => {\n  dispatch({\n    type: USER_LOADING\n  });\n  testAPI.login(email, password, rememberMe).then(response => {\n    dispatch(userLoad(response.data, response.data.inform.inform));\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: response.data\n    });\n  }).catch(err => {\n    debugger;\n    dispatch(returnErrors(err.response.data.message, err.response.status, \"LOGIN_FAIL\"));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n};\nexport const register = (name, email, password) => dispatch => {\n  testAPI.register(name, email, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: response.data\n    });\n    dispatch(userLoad(response.data));\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT_SUCCESS\n  });\n};\nexport const subscribeNewUser = email => dispatch => {\n  testAPI.subscribeNewUser(email).then(response => {\n    dispatch(returnSuccess(response.data.message, response.status, \"SUBSCRIBER_SUCCESS\"));\n    const timer = setTimeout(() => {\n      dispatch(clearSuccess());\n    }, 3000);\n    return () => clearTimeout(timer);\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data.message, err.response.status, \"SUBSCRIBER_FAIL\"));\n  });\n};\nexport default AuthReducer;","map":{"version":3,"sources":["/Volumes/Anton/myApp-1/APP/client/src/redux/AuthReducer.js"],"names":["returnErrors","returnSuccess","clearSuccess","testAPI","USER_LOADING","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","FORGOT_PASS","FORGOT_PASS_RESET","EMAIL_SENT","RESET_PASS","RESET_ERROR","FORGOT_ERROR","initialState","token","sessionStorage","getItem","isAuth","isLoading","user","userInform","forgotEmail","emailSent","AuthReducer","state","action","type","setItem","payload","removeItem","bool","userLoad","changePass","resetEmailSentClear","requestToken","dispatch","getState","forgotPassword","auth","then","response","catch","err","data","message","status","resetPass","newPassword","verifyPassword","resetPassword","changeUserPass","oldPass","email","getAuth","login","password","rememberMe","inform","register","name","logout","subscribeNewUser","timer","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import {\n  returnErrors,\n  returnSuccess,\n  clearSuccess,\n} from \"./SuccessErrorReducer\";\nimport { testAPI } from \"../api/api\";\n\nconst USER_LOADING = \"USER_LOADING\";\nconst USER_LOADED = \"USER_LOADED\";\nconst AUTH_ERROR = \"AUTH_ERROR\";\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nconst LOGIN_FAIL = \"LOGIN_FAIL\";\nconst LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nconst REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nconst REGISTER_FAIL = \"REGISTER_FAIL\";\n\nconst FORGOT_PASS = \"FORGOT_PASS\";\nconst FORGOT_PASS_RESET = \"FORGOT_PASS_RESET\";\nconst EMAIL_SENT = \"EMAIL_SENT\";\nconst RESET_PASS = \"RESET_PASS\";\n\nconst RESET_ERROR = \"RESET_ERROR\";\nconst FORGOT_ERROR = \"FORGOT_ERROR\";\n\nconst initialState = {\n  token: sessionStorage.getItem(\"token\") || \"\",\n  isAuth: null,\n  isLoading: false,\n  user: null,\n  userInform: null,\n  forgotEmail: null,\n  emailSent: false,\n};\n\nconst AuthReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOADING:\n      return { ...state, isLoading: true };\n    case USER_LOADED:\n      sessionStorage.setItem(\"token\", action.payload.token);\n      return {\n        ...state,\n        isAuth: true,\n        user: action.payload.user,\n        userInform: action.userInform,\n      };\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      sessionStorage.setItem(\"token\", action.payload.token);\n      return { ...state, isAuth: true, isLoading: false };\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case REGISTER_FAIL:\n    case LOGOUT_SUCCESS:\n      sessionStorage.removeItem(\"token\");\n      return {\n        ...state,\n        isAuth: false,\n        isLoading: false,\n        user: null,\n        userInform: null,\n        token: null,\n      };\n\n    case FORGOT_PASS:\n      return { ...state, forgotEmail: action.forgotEmail };\n    case EMAIL_SENT:\n      return { ...state, emailSent: action.bool };\n    case FORGOT_PASS_RESET:\n      return { ...state, forgotEmail: action.forgotEmail, emailSent: false };\n    default:\n      return state;\n  }\n};\n\nexport const userLoad = (payload, userInform) => ({\n  type: USER_LOADED,\n  payload,\n  userInform,\n});\n\nexport const changePass = (forgotEmail) => ({ type: FORGOT_PASS, forgotEmail });\nexport const emailSent = (bool) => ({ type: EMAIL_SENT, bool });\nexport const resetEmailSentClear = (forgotEmail) => ({\n  type: FORGOT_PASS_RESET,\n  forgotEmail,\n});\n\nexport const requestToken = () => (dispatch, getState) => {\n  testAPI\n    .forgotPassword(getState().auth.forgotEmail)\n    .then((response) => {\n      dispatch(emailSent(true));\n    })\n    .catch((err) => {\n      dispatch(\n        returnErrors(err.response.data.message, err.response.status, \"FORGOT_ERROR\")\n      );\n      dispatch({ type: FORGOT_ERROR });\n    });\n};\nexport const resetPass = (newPassword, verifyPassword, token) => (dispatch) => {\n  testAPI\n    .resetPassword(newPassword, verifyPassword, token)\n    .then((response) => {\n      dispatch({ type: RESET_PASS });\n      dispatch(\n        returnSuccess(response.data.message, response.status, \"SUCCESS_RESET\")\n      );\n    })\n    .catch((err) => {\n      dispatch(\n        returnErrors(\n          err.response.data.message,\n          err.response.status,\n          \"RESET_ERROR\"\n        )\n      );\n      dispatch({ type: RESET_ERROR });\n    });\n};\n\nexport const changeUserPass = (oldPass, newPassword, verifyPassword) => (\n  dispatch,\n  getState\n) => {\n  testAPI\n    .changeUserPass(\n      oldPass,\n      newPassword,\n      verifyPassword,\n      getState().auth.user.email\n    )\n    .then((response) => {\n      dispatch(\n        returnSuccess(\n          response.data.message,\n          response.status,\n          \"SUCCESS_CHANGE_PASS\"\n        )\n      );\n    })\n    .catch((err) => {\n      dispatch(\n        returnErrors(\n          err.response.data.message,\n          err.response.status,\n          \"ERROR_CHANGE_PASS\"\n        )\n      );\n    });\n};\nexport const getAuth = () => async (dispatch, getState) => {\n  // try {\n  //   const token=getState().auth.token;\n  //    let response=await testAPI.getAuth(token)\n  //     dispatch(userLoad(response.data))\n  // } catch (error) {\n  //   dispatch({type:AUTH_ERROR})\n  // }\n};\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n  dispatch({ type: USER_LOADING });\n  testAPI\n    .login(email, password, rememberMe)\n    .then((response) => {\n      dispatch(userLoad(response.data, response.data.inform.inform));\n      dispatch({ type: LOGIN_SUCCESS, payload: response.data });\n    })\n    .catch((err) => {\n      debugger;\n      dispatch(\n        returnErrors(\n          err.response.data.message,\n          err.response.status,\n          \"LOGIN_FAIL\"\n        )\n      );\n      dispatch({ type: LOGIN_FAIL });\n    });\n};\n\nexport const register = (name, email, password) => (dispatch) => {\n  testAPI\n    .register(name, email, password)\n    .then((response) => {\n      dispatch({ type: REGISTER_SUCCESS, payload: response.data });\n      dispatch(userLoad(response.data));\n    })\n    .catch((err) => {\n      dispatch(\n        returnErrors(\n          err.response.data.message,\n          err.response.status,\n          \"REGISTER_FAIL\"\n        )\n      );\n      dispatch({ type: REGISTER_FAIL });\n    });\n};\n\nexport const logout = () => (dispatch) => {\n  dispatch({ type: LOGOUT_SUCCESS });\n};\nexport const subscribeNewUser = (email) => (dispatch) => {\n  testAPI\n    .subscribeNewUser(email)\n    .then((response) => {\n      dispatch(\n        returnSuccess(\n          response.data.message,\n          response.status,\n          \"SUBSCRIBER_SUCCESS\"\n        )\n      );\n      const timer = setTimeout(() => {\n        dispatch(clearSuccess());\n      }, 3000);\n      return () => clearTimeout(timer);\n    })\n    .catch((err) => {\n      dispatch(\n        returnErrors(\n          err.response.data.message,\n          err.response.status,\n          \"SUBSCRIBER_FAIL\"\n        )\n      );\n    });\n};\n\nexport default AuthReducer;\n"]},"metadata":{},"sourceType":"module"}